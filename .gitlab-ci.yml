stages:
  - determine
  - build

variables:
  SOLUTION_FILE: "Pulsar.sln"
  BUILD_CONFIGURATION: "Release"
  SERVER_TARGET_FRAMEWORK: "net9.0-windows"
  CLIENT_TARGET_FRAMEWORK: "net472"

# Only run on main branch when C# files or project files change
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - "**/*.cs"
        - "**/*.csproj"
        - "**/*.sln"
        - ".gitlab-ci.yml"

determine-version:
  stage: determine
  image: ubuntu:22.04
  tags:
    - docker
  before_script:
    - apt-get update -qq && apt-get install -y -qq git grep
  script:
    - |
      if [ -f "Pulsar.Server/Properties/AssemblyInfo.cs" ]; then
        VERSION=$(grep -oP '\[assembly: AssemblyVersion\("\K[0-9]+\.[0-9]+\.[0-9]+' Pulsar.Server/Properties/AssemblyInfo.cs || echo "unknown")
        echo "Found version: $VERSION"
        echo "VERSION=$VERSION" >> variables.env
      else
        echo "AssemblyInfo.cs not found"
        echo "VERSION=unknown" >> variables.env
      fi
    - |
      if echo "$CI_COMMIT_MESSAGE" | grep -q "^STABLE"; then
        echo "Stable release detected"
        echo "IS_STABLE=true" >> variables.env
        echo "RELEASE_TYPE=stable" >> variables.env
      else
        echo "Development build"
        echo "IS_STABLE=false" >> variables.env
        echo "RELEASE_TYPE=dev" >> variables.env
      fi
    - echo "Commit short SHA:" $CI_COMMIT_SHORT_SHA
    - echo "Ref name:" $CI_COMMIT_REF_NAME
    - echo "COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA" >> variables.env
    - |
      # Clean commit message for dotenv (remove problematic characters)
      CLEAN_MESSAGE=$(echo "$CI_COMMIT_MESSAGE" | tr -d '\n\r' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
      echo "COMMIT_MESSAGE=$CLEAN_MESSAGE" >> variables.env
    - echo "Debug - variables.env contents:"
    - cat variables.env
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 1 hour

build:
  stage: build
  needs: ["determine-version"]
  image: debian:12
  tags:
    - docker
  before_script:
    # Install Microsoft packages repository and .NET SDK 9.0
    - apt-get update -qq
    - apt-get install -y -qq wget ca-certificates apt-transport-https
    - wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    - dpkg -i packages-microsoft-prod.deb
    - rm packages-microsoft-prod.deb
    - apt-get update -qq
    - apt-get install -y -qq dotnet-sdk-9.0 zip
  script:
    - echo "Building Pulsar version:" $VERSION
    - echo "Release type:" $RELEASE_TYPE
    - echo "Commit:" $COMMIT_SHORT_SHA
    - echo "Commit message:" $COMMIT_MESSAGE
    - echo "Restoring dependencies..."
    - dotnet restore $SOLUTION_FILE
    - echo "Building client..."
    - dotnet build Pulsar.Client/Pulsar.Client.csproj --configuration $BUILD_CONFIGURATION --no-restore
    - echo "Publishing server..."
    - dotnet publish Pulsar.Server/Pulsar.Server.csproj --configuration $BUILD_CONFIGURATION --output "$CI_PROJECT_DIR/publish/server" --no-restore
    - echo "Preparing build output..."
    - mkdir -p build_output
    - cp -r publish/server/* build_output/
    - |
      if [ -f "bin/Release/$SERVER_TARGET_FRAMEWORK/client.bin" ]; then
        cp "bin/Release/$SERVER_TARGET_FRAMEWORK/client.bin" build_output/client.bin
        echo "Copied client.bin from server target framework directory"
      elif [ -f "bin/Release/$CLIENT_TARGET_FRAMEWORK/Client.exe" ]; then
        cp "bin/Release/$CLIENT_TARGET_FRAMEWORK/Client.exe" build_output/client.bin
        echo "Copied Client.exe from client target framework directory as client.bin"
      else
        echo "Warning: Client executable not found in expected locations"
        echo "Checking available files:"
        find bin/Release -name "Client.exe" -o -name "client.bin" -o -name "*.exe" | head -10 || echo "No client files found"
        echo "Directory structure:"
        ls -la bin/Release/ || echo "bin/Release not found"
      fi
    - cd build_output && zip -r ../build_output.zip . && cd ..
    - find build_output -type f -name "*.exe" -o -name "*.dll" -o -name "*.bin" | head -20
    - ls -la build_output/ || echo "Build output directory listing failed"
  artifacts:
    paths:
      - build_output.zip
    expire_in: 30 days
    when: on_success