stages:
  - determine
  - build
  - release

variables:
  SOLUTION_FILE: "Pulsar.sln"
  BUILD_CONFIGURATION: "Release"
  TARGET_FRAMEWORK: "net472"

# Only run on main branch when C# files or project files change
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      changes:
        - "**/*.cs"
        - "**/*.csproj"
        - "**/*.sln"
        - ".gitlab-ci.yml"

determine-version:
  stage: determine
  image: ubuntu:22.04
  tags:
    - docker
  before_script:
    - apt-get update -qq && apt-get install -y -qq git grep
  script:
    - |
      if [ -f "Pulsar.Server/Properties/AssemblyInfo.cs" ]; then
        VERSION=$(grep -oP '\[assembly: AssemblyVersion\("\K[0-9]+\.[0-9]+\.[0-9]+' Pulsar.Server/Properties/AssemblyInfo.cs || echo "unknown")
        echo "Found version: $VERSION"
        echo "VERSION=$VERSION" >> variables.env
      else
        echo "AssemblyInfo.cs not found"
        echo "VERSION=unknown" >> variables.env
      fi
    - |
      if echo "$CI_COMMIT_MESSAGE" | grep -q "^STABLE"; then
        echo "Stable release detected"
        echo "IS_STABLE=true" >> variables.env
        echo "RELEASE_TYPE=stable" >> variables.env
      else
        echo "Development build"
        echo "IS_STABLE=false" >> variables.env
        echo "RELEASE_TYPE=dev" >> variables.env
      fi
    - echo "Commit short SHA:" $CI_COMMIT_SHORT_SHA
    - echo "Ref name:" $CI_COMMIT_REF_NAME
    - echo "COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA" >> variables.env
    - |
      # Clean commit message for dotenv (remove problematic characters)
      CLEAN_MESSAGE=$(echo "$CI_COMMIT_MESSAGE" | tr -d '\n\r' | sed 's/"/\\"/g' | sed "s/'/\\'/g")
      echo "COMMIT_MESSAGE=$CLEAN_MESSAGE" >> variables.env
    - echo "Debug - variables.env contents:"
    - cat variables.env
  artifacts:
    reports:
      dotenv: variables.env
    expire_in: 1 hour

build:
  stage: build
  needs: ["determine-version"]
  image: debian:12
  tags:
    - docker
  before_script:
    # Install Microsoft packages repository and .NET SDK 8.0
    - apt-get update -qq
    - apt-get install -y -qq wget ca-certificates apt-transport-https
    - wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
    - dpkg -i packages-microsoft-prod.deb
    - rm packages-microsoft-prod.deb
    - apt-get update -qq
    - apt-get install -y -qq dotnet-sdk-8.0 zip unzip
  script:
    - echo "Building Pulsar version:" $VERSION
    - echo "Release type:" $RELEASE_TYPE
    - echo "Commit:" $COMMIT_SHORT_SHA
    - echo "Commit message:" $COMMIT_MESSAGE
    - dotnet build $SOLUTION_FILE --configuration $BUILD_CONFIGURATION --output "$CI_PROJECT_DIR/build_output/"
    - cd build_output && zip -r ../build_output.zip . && cd ..
    - find build_output -type f -name "*.exe" -o -name "*.dll" -o -name "*.bin" | head -20
    - ls -la build_output/ || echo "Build output directory listing failed"
  artifacts:
    paths:
      - build_output.zip
      - build_output/
      - setup.bat
    expire_in: 1 week

# Upload to GitLab Package Registry as well (optional but useful)
upload-package:
  stage: release
  needs: ["determine-version", "build"]
  image: curlimages/curl:latest
  tags:
    - docker
  rules:
    - if: $IS_STABLE == "true"
      variables:
        PACKAGE_NAME: "pulsar-stable"
    - if: $IS_STABLE == "false"
      variables:
        PACKAGE_NAME: "pulsar-dev"
  script:
    - |
      curl --header "JOB-TOKEN: $CI_JOB_TOKEN" \
           --upload-file build_output.zip \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/${PACKAGE_NAME}/${VERSION}/build_output.zip"

release-stable:
  stage: release
  needs: ["determine-version", "build"]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker
  rules:
    - if: $IS_STABLE == "true"
  before_script:
    - |
      if curl --silent --fail --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/AutoBuild" > /dev/null 2>&1; then
        echo "Deleting existing stable release..."
        curl --request DELETE --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/AutoBuild"
      fi
    - |
      if curl --silent --fail --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags/AutoBuild" > /dev/null 2>&1; then
        echo "Deleting existing stable tag..."
        curl --request DELETE --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags/AutoBuild"
      fi
  script:
    - "echo 'Creating stable release for version: $VERSION'"
  release:
    tag_name: "AutoBuild"
    name: "Pulsar Stable"
    description: |
      # Pulsar Stable Build
      **Version:** $VERSION
      **Built from branch:** $CI_COMMIT_BRANCH
      **Build date:** $CI_PIPELINE_CREATED_AT
      **Commit:** $COMMIT_SHORT_SHA
      **Commit message:** $COMMIT_MESSAGE
      
      This is the stable automated build triggered by a commit message starting with 'STABLE'.
    assets:
      links:
        - name: "build_output.zip"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/raw/build_output.zip?job=build"
          link_type: "package"
        - name: "DONT_DOWNLOAD_SERVER.exe"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/raw/build_output/Pulsar.exe?job=build"
          link_type: "other"
        - name: "DONT_DOWNLOAD_CLIENT.bin"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/raw/build_output/client.bin?job=build"
          link_type: "other"
        - name: "RUN_ME.bat"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/raw/setup.bat?job=build"
          link_type: "other"

release-dev:
  stage: release
  needs: ["determine-version", "build"]
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker
  rules:
    - if: $IS_STABLE == "false"
  before_script:
    - |
      if curl --silent --fail --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/AutoBuild-Dev" > /dev/null 2>&1; then
        echo "Deleting existing dev release..."
        curl --request DELETE --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases/AutoBuild-Dev"
      fi
    - |
      if curl --silent --fail --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
         "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags/AutoBuild-Dev" > /dev/null 2>&1; then
        echo "Deleting existing dev tag..."
        curl --request DELETE --header "PRIVATE-TOKEN: $CI_JOB_TOKEN" \
             "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/repository/tags/AutoBuild-Dev"
      fi
  script:
    - "echo 'Creating development release for version: $VERSION'"
  release:
    tag_name: "AutoBuild-Dev"
    name: "Pulsar Development"
    description: |
      # Pulsar Development Build
      **Version:** $VERSION (Development)
      **Built from branch:** $CI_COMMIT_BRANCH
      **Build date:** $CI_PIPELINE_CREATED_AT
      **Commit:** $COMMIT_SHORT_SHA
      **Commit message:** $COMMIT_MESSAGE
      
      This is the development build with the latest features and may be unstable.
    assets:
      links:
        - name: "build_output.zip"
          url: "${CI_PROJECT_URL}/-/jobs/artifacts/${CI_COMMIT_SHA}/raw/build_output.zip?job=build"
          link_type: "package"